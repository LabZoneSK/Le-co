// the grid

/* 
   dependencies:
     $breakpoints
     $grid-columns
*/

// column container

.row {
  width: 100%;
  clear:both;
  margin-bottom: 10px;
  
  &::after {
    content: " ";
    display:block;
    clear:both;
  }
}

// columns  

/* structural grid (layout) */

[class*="c-"] {
  float:left;
  min-height: 1px;
  padding: 0 10px;
  word-wrap: break-word;
  width: 100%;
}

/* fixing pixel "rounding" */
[class*="c-"] + [class*="c-"]:last-child {
  float:right;
}



// generating all breakpoint overrides
@each $breakpointName, $breakpointStartingPoint in $breakpoints {
    // if there is a named breakpoint, well make sure name gets separeted by dash
    @if $breakpointName != "" {
      $breakpointName: $breakpointName + "-";
    }
    @media only screen and (min-width: ($breakpointStartingPoint)) {
        @for $i from 1 through $grid-columns{
            .c-#{$breakpointName}#{($i)} {
              width: 100%/$grid-columns * $i;
            }
            .c-#{$breakpointName}f#{($i)} {
              width: 100%/$i;
            }
        }
    }
}


/* column nesting limit -> 4 levels allowed - may be removed or tweaked if needed */
[class*="c-"] > [class*="c-"] > [class*="c-"] > [class*="c-"] > [class*="c-"] {
    width: 100%;
}




// text grid gutter (not for general layout)
$text-gutters: tg-small 10px, tg-medium 20px, tg-large 30px;

@each $text-gutter in $text-gutters {
  $tg-classname: nth($text-gutter, 1);
  $tg-padding: nth($text-gutter, 2);

  .#{$tg-classname}, .#{$tg-classname} .row  {
    > [class*="c-"] {padding: 0 $tg-padding $tg-padding 0;}
  }
}
